{
  "description": "Collect event logs from Microsoft-Windows-PowerShell/Operational.",
  "inputs": {
    "winlogs-winlog": {
      "enabled": true,
      "streams": {
        "winlog.winlogs": {
          "enabled": true,
          "vars": {
            "channel": "Microsoft-Windows-PowerShell/Operational",
            "custom": "\"processors\":\n- \"script\":\n    \"id\": \"microsoft-windows-powershell/operational\"\n    \"lang\": \"javascript\"\n    \"source\": |\n      // Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n      // or more contributor license agreements. Licensed under the Elastic License;\n      // you may not use this file except in compliance with the Elastic License.\n\n      var powershell = (function () {\n          var path = require(\"path\");\n          var processor = require(\"processor\");\n          var windows = require(\"windows\");\n\n          var normalizeCommonFieldNames = new processor.Convert({\n              fields: [\n                  {\n                      from: \"winlog.event_data.Engine Version\",\n                      to: \"winlog.event_data.EngineVersion\",\n                  },\n                  {\n                      from: \"winlog.event_data.Pipeline ID\",\n                      to: \"winlog.event_data.PipelineId\",\n                  },\n                  {\n                      from: \"winlog.event_data.Runspace ID\",\n                      to: \"winlog.event_data.RunspaceId\",\n                  },\n                  {\n                      from: \"winlog.event_data.Host Version\",\n                      to: \"winlog.event_data.HostVersion\",\n                  },\n                  {\n                      from: \"winlog.event_data.Script Name\",\n                      to: \"winlog.event_data.ScriptName\",\n                  },\n                  {\n                      from: \"winlog.event_data.Path\",\n                      to: \"winlog.event_data.ScriptName\",\n                  },\n                  {\n                      from: \"winlog.event_data.Command Path\",\n                      to: \"winlog.event_data.CommandPath\",\n                  },\n                  {\n                      from: \"winlog.event_data.Command Name\",\n                      to: \"winlog.event_data.CommandName\",\n                  },\n                  {\n                      from: \"winlog.event_data.Command Type\",\n                      to: \"winlog.event_data.CommandType\",\n                  },\n                  {\n                      from: \"winlog.event_data.User\",\n                      to: \"winlog.event_data.UserId\",\n                  },\n              ],\n              mode: \"rename\",\n              ignore_missing: true,\n              fail_on_error: false,\n          })\n\n          // Builds a dissect tokenizer.\n          //\n          // - chunks:    number of chunks dissect needs to look for.\n          // - delimiter: indicates what is the delimiter between chunks,\n          //              in addition to `\\n` which is already expected.\n          // - sep:       separator between key value pairs.\n          //\n          // example:\n          // For a string like \"Foo=Bar\\n\\tBar=Baz\", chunks: 2, delimiter: '\\t', sep: '='\n          var buildNewlineSpacedTokenizer = function (chunks, delimiter, sep) {\n              var tokenizer = \"\";\n              for (var i = 0; i < chunks; i++) {\n                  if (i !== 0) {\n                      tokenizer += \"\\n%{}\";\n                  }\n                  tokenizer += delimiter+\"%{*p\"+i+\"}\"+sep+\"%{&p\"+i+\"}\";\n              }\n              return tokenizer;\n          };\n\n          var dissectField = function (fromField, targetPrefix, chunks, delimiter, sep) {\n              return new processor.Dissect({\n                  field: fromField,\n                  target_prefix: targetPrefix,\n                  tokenizer: buildNewlineSpacedTokenizer(chunks, delimiter, sep),\n                  fail_on_error: false,\n              });\n          };\n\n          // countChunksDelimitedBy will return the number of chunks contained in a field\n          // that are delimited by the given delimiter.\n          var countChunksDelimitedBy = function(evt, fromField, delimiter) {\n              var str = evt.Get(fromField);\n              if (!str) {\n                  return 0;\n              }\n              return str.split(delimiter).length-1;\n          };\n\n          var dissect4xxAnd600 = function (evt) {\n              var delimiter = \"\\t\";\n              var chunks = countChunksDelimitedBy(evt, \"winlog.event_data.param3\", delimiter);\n\n              dissectField(\"winlog.event_data.param3\", \"winlog.event_data\", chunks, delimiter, \"=\").Run(evt);\n\n              // these fields contain redundant information.\n              evt.Delete(\"winlog.event_data.param1\");\n              evt.Delete(\"winlog.event_data.param2\");\n              evt.Delete(\"winlog.event_data.param3\");\n          };\n\n          var dissect800Detail = function (evt) {\n              var delimiter = \"\\t\";\n              var chunks = countChunksDelimitedBy(evt, \"winlog.event_data.param2\", delimiter);\n\n              dissectField(\"winlog.event_data.param2\", \"winlog.event_data\", chunks, \"\\t\", \"=\").Run(evt);\n\n              // these fields contain redundant information.\n              evt.Delete(\"winlog.event_data.param1\");\n              evt.Delete(\"winlog.event_data.param2\");\n          };\n\n          var dissect4103 = function (evt) {\n              var delimiter = \"        \";\n              var chunks = countChunksDelimitedBy(evt, \"winlog.event_data.ContextInfo\", delimiter);\n\n              dissectField(\"winlog.event_data.ContextInfo\", \"winlog.event_data\", chunks, delimiter, \" = \").Run(evt);\n\n              // these fields contain redundant information.\n              evt.Delete(\"winlog.event_data.ContextInfo\");\n              evt.Delete(\"winlog.event_data.Severity\");\n          };\n\n          var addEngineVersion = function (evt) {\n              var version = evt.Get(\"winlog.event_data.EngineVersion\");\n              evt.Delete(\"winlog.event_data.EngineVersion\");\n              if (!version) {\n                  return;\n              }\n\n              evt.Put(\"powershell.engine.version\", version);\n          };\n\n          var addPipelineID = function (evt) {\n              var id = evt.Get(\"winlog.event_data.PipelineId\");\n              evt.Delete(\"winlog.event_data.PipelineId\");\n              if (!id) {\n                  return;\n              }\n\n              evt.Put(\"powershell.pipeline_id\", id);\n          };\n\n          var addRunspaceID = function (evt) {\n              var id = evt.Get(\"winlog.event_data.RunspaceId\");\n              evt.Delete(\"winlog.event_data.RunspaceId\");\n              if (!id) {\n                  return;\n              }\n\n              evt.Put(\"powershell.runspace_id\", id);\n          };\n\n          var addScriptBlockID = function (evt) {\n              var id = evt.Get(\"winlog.event_data.ScriptBlockId\");\n              evt.Delete(\"winlog.event_data.ScriptBlockId\");\n              if (!id) {\n                  return;\n              }\n\n              evt.Put(\"powershell.file.script_block_id\", id);\n          };\n\n          var addScriptBlockText = function (evt) {\n              var text = evt.Get(\"winlog.event_data.ScriptBlockText\");\n              evt.Delete(\"winlog.event_data.ScriptBlockText\");\n              if (!text) {\n                  return;\n              }\n\n              evt.Put(\"powershell.file.script_block_text\", text);\n          };\n\n          var splitCommandLine = function (evt, source, target) {\n              var commandLine = evt.Get(source);\n              if (!commandLine) {\n                  return;\n              }\n              evt.Put(target, windows.splitCommandLine(commandLine));\n          };\n\n          var addProcessArgs = function (evt) {\n              splitCommandLine(evt, \"process.command_line\", \"process.args\");\n              var args = evt.Get(\"process.args\");\n              if (args && args.length > 0) {\n                  evt.Put(\"process.args_count\", args.length);\n              }\n          };\n\n          var addExecutableVersion = function (evt) {\n              var version = evt.Get(\"winlog.event_data.HostVersion\");\n              evt.Delete(\"winlog.event_data.HostVersion\");\n              if (!version) {\n                  return;\n              }\n\n              evt.Put(\"powershell.process.executable_version\", version);\n          };\n\n          var addFileInfo = function (evt) {\n              var scriptName = evt.Get(\"winlog.event_data.ScriptName\");\n              evt.Delete(\"winlog.event_data.ScriptName\");\n              if (!scriptName) {\n                  return;\n              }\n\n              evt.Put(\"file.path\", scriptName);\n              evt.Put(\"file.name\", path.basename(scriptName));\n              evt.Put(\"file.directory\", path.dirname(scriptName));\n\n              // path returns extensions with a preceding ., e.g.: .tmp, .png\n              // according to ecs the expected format is without it, so we need to remove it.\n              var ext = path.extname(scriptName);\n              if (!ext) {\n                  return;\n              }\n\n              if (ext.charAt(0) === \".\") {\n                  ext = ext.substr(1);\n              }\n              evt.Put(\"file.extension\", ext);\n          };\n\n          var addCommandValue = function (evt) {\n              var value = evt.Get(\"winlog.event_data.CommandLine\")\n              evt.Delete(\"winlog.event_data.CommandLine\");\n              if (!value) {\n                  return;\n              }\n\n              evt.Put(\"powershell.command.value\", value.trim());\n          };\n\n          var addCommandPath = function (evt) {\n              var commandPath = evt.Get(\"winlog.event_data.CommandPath\");\n              evt.Delete(\"winlog.event_data.CommandPath\");\n              if (!commandPath) {\n                  return;\n              }\n\n              evt.Put(\"powershell.command.path\", commandPath);\n          };\n\n          var addCommandName = function (evt) {\n              var commandName = evt.Get(\"winlog.event_data.CommandName\");\n              evt.Delete(\"winlog.event_data.CommandName\");\n              if (!commandName) {\n                  return;\n              }\n\n              evt.Put(\"powershell.command.name\", commandName);\n          };\n\n          var addCommandType = function (evt) {\n              var commandType = evt.Get(\"winlog.event_data.CommandType\");\n              evt.Delete(\"winlog.event_data.CommandType\");\n              if (!commandType) {\n                  return;\n              }\n\n              evt.Put(\"powershell.command.type\", commandType);\n          };\n\n          var detailRegex = /^(.+)\\((.+)\\)\\:\\s*(.+)?$/;\n          var parameterBindingRegex = /^.*name\\=(.+);\\s*value\\=(.+)$/\n\n          // Parses a command invocation detail raw line, and converts it to an object, based on its type.\n          //\n          // - for unexpectedly formatted ones: {value: \"the raw line as it is\"}\n          // - for all:\n          //      * related_command: describes to what command it is related to\n          //      * value: the value for that detail line\n          //      * type: the type of the detail line, i.e.: CommandInvocation, ParameterBinding, NonTerminatingError\n          // - additionally, ParameterBinding adds a `name` field with the parameter name being bound.\n          var parseRawDetail = function (raw) {\n              var matches = detailRegex.exec(raw);\n              if (!matches || matches.length !== 4) {\n                  return {value: raw};\n              }\n\n              if (matches[1] !== \"ParameterBinding\") {\n                  return {type: matches[1], related_command: matches[2], value: matches[3]};\n              }\n\n              var nameValMatches = parameterBindingRegex.exec(matches[3]);\n              if (!nameValMatches || nameValMatches.length !== 3) {\n                  return {value: matches[3]};\n              }\n\n              return {\n                  type: matches[1],\n                  related_command: matches[2],\n                  name: nameValMatches[1],\n                  value: nameValMatches[2],\n              };\n          };\n\n          var addCommandInvocationDetails = function (evt, from) {\n              var rawDetails = evt.Get(from);\n              if (!rawDetails) {\n                  return;\n              }\n\n              var details = [];\n              rawDetails.split(\"\\n\").forEach(function (raw) {\n                  details.push(parseRawDetail(raw));\n              });\n\n              if (details.length === 0) {\n                  return;\n              }\n\n              evt.Delete(from);\n              evt.Put(\"powershell.command.invocation_details\", details);\n          };\n\n          var addCommandInvocationDetailsForEvent800 = function (evt) {\n              addCommandInvocationDetails(evt, \"winlog.event_data.param3\");\n          };\n\n          var addCommandInvocationDetailsForEvent4103 = function (evt) {\n              addCommandInvocationDetails(evt, \"winlog.event_data.Payload\");\n          };\n\n          var addUser = function (evt) {\n              var userParts = evt.Get(\"winlog.event_data.UserId\").split(\"\\\\\");\n              evt.Delete(\"winlog.event_data.UserId\");\n              if (userParts.length === 2) {\n                  evt.Put(\"user.domain\", userParts[0]);\n                  evt.Put(\"user.name\", userParts[1]);\n                  evt.AppendTo(\"related.user\", userParts[1]);\n              }\n          };\n\n          var addConnectedUser = function (evt) {\n              var userParts = evt.Get(\"winlog.event_data.Connected User\").split(\"\\\\\");\n              evt.Delete(\"winlog.event_data.Connected User\");\n              if (userParts.length === 2) {\n                  evt.Put(\"powershell.connected_user.domain\", userParts[0]);\n                  if (evt.Get(\"user.domain\")) {\n                      evt.Put(\"destination.user.domain\", evt.Get(\"user.domain\"));\n                  }\n                  evt.Put(\"source.user.domain\", userParts[0]);\n                  evt.Put(\"user.domain\", userParts[0]);\n\n                  evt.Put(\"powershell.connected_user.name\", userParts[1]);\n                  if (evt.Get(\"user.name\")) {\n                      evt.Put(\"destination.user.name\", evt.Get(\"user.name\"));\n                  }\n                  evt.Put(\"source.user.name\", userParts[1]);\n                  evt.Put(\"user.name\", userParts[1]);\n                  evt.AppendTo(\"related.user\", userParts[1]);\n              }\n          };\n\n          var removeEmptyEventData = function (evt) {\n              var eventData = evt.Get(\"winlog.event_data\");\n              if (eventData && Object.keys(eventData).length === 0) {\n                  evt.Delete(\"winlog.event_data\");\n              }\n          };\n\n          var event4xxAnd600Common = new processor.Chain()\n              .Add(dissect4xxAnd600)\n              .Convert({\n                  fields: [\n                      {\n                          from: \"winlog.event_data.SequenceNumber\",\n                          to: \"event.sequence\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.NewEngineState\",\n                          to: \"powershell.engine.new_state\",\n                      },\n                      {\n                          from: \"winlog.event_data.PreviousEngineState\",\n                          to: \"powershell.engine.previous_state\",\n                      },\n                      {\n                          from: \"winlog.event_data.NewProviderState\",\n                          to: \"powershell.provider.new_state\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProviderName\",\n                          to: \"powershell.provider.name\",\n                      },\n                      {\n                          from: \"winlog.event_data.HostId\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.HostApplication\",\n                          to: \"process.command_line\",\n                      },\n                      {\n                          from: \"winlog.event_data.HostName\",\n                          to: \"process.title\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(addEngineVersion)\n              .Add(addPipelineID)\n              .Add(addRunspaceID)\n              .Add(addProcessArgs)\n              .Add(addExecutableVersion)\n              .Add(addFileInfo)\n              .Add(addCommandValue)\n              .Add(addCommandPath)\n              .Add(addCommandName)\n              .Add(addCommandType)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          var event400 = new processor.Chain()\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"start\"],\n                  },\n                  target: \"event\",\n              })\n              .Add(event4xxAnd600Common)\n              .Build()\n\n          var event403 = new processor.Chain()\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"end\"],\n                  },\n                  target: \"event\",\n              })\n              .Add(event4xxAnd600Common)\n              .Build()\n\n          var event600 = new processor.Chain()\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"info\"],\n                  },\n                  target: \"event\",\n              })\n              .Add(event4xxAnd600Common)\n              .Build()\n\n          var event800 = new processor.Chain()\n              .Add(dissect800Detail)\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"info\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [\n                      {\n                          from: \"winlog.event_data.SequenceNumber\",\n                          to: \"event.sequence\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.HostId\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.HostApplication\",\n                          to: \"process.command_line\",\n                      },\n                      {\n                          from: \"winlog.event_data.HostName\",\n                          to: \"process.title\",\n                      },\n                      {\n                          from: \"winlog.event_data.DetailTotal\",\n                          to: \"powershell.total\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.DetailSequence\",\n                          to: \"powershell.sequence\",\n                          type: \"long\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(addEngineVersion)\n              .Add(addPipelineID)\n              .Add(addRunspaceID)\n              .Add(addProcessArgs)\n              .Add(addExecutableVersion)\n              .Add(addFileInfo)\n              .Add(addCommandValue)\n              .Add(addCommandPath)\n              .Add(addCommandName)\n              .Add(addCommandType)\n              .Add(addUser)\n              .Add(addCommandInvocationDetailsForEvent800)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          var event4103 = new processor.Chain()\n              .Add(dissect4103)\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"info\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [\n                      {\n                          from: \"winlog.event_data.Sequence Number\",\n                          to: \"event.sequence\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Host ID\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.Host Application\",\n                          to: \"process.command_line\",\n                      },\n                      {\n                          from: \"winlog.event_data.Host Name\",\n                          to: \"process.title\",\n                      },\n                      {\n                          from: \"winlog.event_data.Shell ID\",\n                          to: \"powershell.id\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Convert({\n                  fields: [\n                      {\n                          from: \"winlog.user.identifier\",\n                          to: \"user.id\",\n                          type: \"string\",\n                      },\n                  ],\n                  mode: \"copy\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(normalizeCommonFieldNames)\n              .Add(addEngineVersion)\n              .Add(addPipelineID)\n              .Add(addRunspaceID)\n              .Add(addProcessArgs)\n              .Add(addExecutableVersion)\n              .Add(addFileInfo)\n              .Add(addCommandValue)\n              .Add(addCommandPath)\n              .Add(addCommandName)\n              .Add(addCommandType)\n              .Add(addUser)\n              .Add(addConnectedUser)\n              .Add(addCommandInvocationDetailsForEvent4103)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          var event4104 = new processor.Chain()\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"info\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [\n                      {\n                          from: \"winlog.event_data.MessageNumber\",\n                          to: \"powershell.sequence\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.MessageTotal\",\n                          to: \"powershell.total\",\n                          type: \"long\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Convert({\n                  fields: [\n                      {\n                          from: \"winlog.user.identifier\",\n                          to: \"user.id\",\n                          type: \"string\",\n                      },\n                  ],\n                  mode: \"copy\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(normalizeCommonFieldNames)\n              .Add(addFileInfo)\n              .Add(addScriptBlockID)\n              .Add(addScriptBlockText)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          var event4105And4106Common = new processor.Chain()\n              .Add(addRunspaceID)\n              .Add(addScriptBlockID)\n              .Add(removeEmptyEventData)\n              .Convert({\n                  fields: [\n                      {\n                          from: \"winlog.user.identifier\",\n                          to: \"user.id\",\n                          type: \"string\",\n                      },\n                  ],\n                  mode: \"copy\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Build();\n\n          var event4105 = new processor.Chain()\n              .Add(event4105And4106Common)\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"start\"],\n                  },\n                  target: \"event\",\n              })\n              .Build();\n\n          var event4106 = new processor.Chain()\n              .Add(event4105And4106Common)\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"end\"],\n                  },\n                  target: \"event\",\n              })\n              .Build();\n\n          return {\n              400: event400.Run,\n              403: event403.Run,\n              600: event600.Run,\n              800: event800.Run,\n              4103: event4103.Run,\n              4104: event4104.Run,\n              4105: event4105.Run,\n              4106: event4106.Run,\n\n              process: function(evt) {\n                  var eventId = evt.Get(\"winlog.event_id\");\n                  var processor = this[eventId];\n                  if (processor === undefined) {\n                      return;\n                  }\n                  evt.Put(\"event.module\", \"powershell\");\n                  processor(evt);\n              },\n          };\n      })();\n\n      function process(evt) {\n          return powershell.process(evt);\n      }\n- \"drop_fields\":\n    \"fields\":\n    - \"event.module\"\n    \"ignore_missing\": true\n",
            "data_stream.dataset": "winlog.powershell-operational",
            "event_id": "4103,4104,4105,4106",
            "ignore_older": "72h",
            "language": 0,
            "preserve_original_event": false,
            "providers": [],
            "tags": []
          }
        }
      }
    }
  },
  "name": "winlog-powershell-operational",
  "namespace": "default",
  "package": {
    "name": "winlog",
    "version": "2.1.1"
  },
  "policy_id": "$AGENT_POLICY_ID"
}
