{
  "description": "Collect event logs from Sysmon.",
  "inputs": {
    "winlogs-winlog": {
      "enabled": true,
      "streams": {
        "winlog.winlogs": {
          "enabled": true,
          "vars": {
            "channel": "Sysmon",
            "custom": "\"processors\":\n- \"script\":\n    \"id\": \"sysmon\"\n    \"lang\": \"javascript\"\n    \"source\": |\n      // Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one\n      // or more contributor license agreements. Licensed under the Elastic License;\n      // you may not use this file except in compliance with the Elastic License.\n\n      // Polyfill for String startsWith.\n      if (!String.prototype.startsWith) {\n          Object.defineProperty(String.prototype, \"startsWith\", {\n              value: function (search, pos) {\n                  pos = !pos || pos < 0 ? 0 : +pos;\n                  return this.substring(pos, pos + search.length) === search;\n              },\n          });\n      }\n\n      var sysmon = (function () {\n          var path = require(\"path\");\n          var processor = require(\"processor\");\n          var windows = require(\"windows\");\n          var net = require(\"net\");\n\n          // Windows error codes for DNS. This list was generated using\n          // 'go run gen_dns_error_codes.go'.\n          var dnsQueryStatusCodes = {\n              \"0\": \"SUCCESS\",\n              \"5\": \"ERROR_ACCESS_DENIED\",\n              \"8\": \"ERROR_NOT_ENOUGH_MEMORY\",\n              \"13\": \"ERROR_INVALID_DATA\",\n              \"14\": \"ERROR_OUTOFMEMORY\",\n              \"123\": \"ERROR_INVALID_NAME\",\n              \"1214\": \"ERROR_INVALID_NETNAME\",\n              \"1223\": \"ERROR_CANCELLED\",\n              \"1460\": \"ERROR_TIMEOUT\",\n              \"4312\": \"ERROR_OBJECT_NOT_FOUND\",\n              \"9001\": \"DNS_ERROR_RCODE_FORMAT_ERROR\",\n              \"9002\": \"DNS_ERROR_RCODE_SERVER_FAILURE\",\n              \"9003\": \"DNS_ERROR_RCODE_NAME_ERROR\",\n              \"9004\": \"DNS_ERROR_RCODE_NOT_IMPLEMENTED\",\n              \"9005\": \"DNS_ERROR_RCODE_REFUSED\",\n              \"9006\": \"DNS_ERROR_RCODE_YXDOMAIN\",\n              \"9007\": \"DNS_ERROR_RCODE_YXRRSET\",\n              \"9008\": \"DNS_ERROR_RCODE_NXRRSET\",\n              \"9009\": \"DNS_ERROR_RCODE_NOTAUTH\",\n              \"9010\": \"DNS_ERROR_RCODE_NOTZONE\",\n              \"9016\": \"DNS_ERROR_RCODE_BADSIG\",\n              \"9017\": \"DNS_ERROR_RCODE_BADKEY\",\n              \"9018\": \"DNS_ERROR_RCODE_BADTIME\",\n              \"9101\": \"DNS_ERROR_KEYMASTER_REQUIRED\",\n              \"9102\": \"DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE\",\n              \"9103\": \"DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1\",\n              \"9104\": \"DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS\",\n              \"9105\": \"DNS_ERROR_UNSUPPORTED_ALGORITHM\",\n              \"9106\": \"DNS_ERROR_INVALID_KEY_SIZE\",\n              \"9107\": \"DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE\",\n              \"9108\": \"DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION\",\n              \"9109\": \"DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR\",\n              \"9110\": \"DNS_ERROR_UNEXPECTED_CNG_ERROR\",\n              \"9111\": \"DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION\",\n              \"9112\": \"DNS_ERROR_KSP_NOT_ACCESSIBLE\",\n              \"9113\": \"DNS_ERROR_TOO_MANY_SKDS\",\n              \"9114\": \"DNS_ERROR_INVALID_ROLLOVER_PERIOD\",\n              \"9115\": \"DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET\",\n              \"9116\": \"DNS_ERROR_ROLLOVER_IN_PROGRESS\",\n              \"9117\": \"DNS_ERROR_STANDBY_KEY_NOT_PRESENT\",\n              \"9118\": \"DNS_ERROR_NOT_ALLOWED_ON_ZSK\",\n              \"9119\": \"DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD\",\n              \"9120\": \"DNS_ERROR_ROLLOVER_ALREADY_QUEUED\",\n              \"9121\": \"DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE\",\n              \"9122\": \"DNS_ERROR_BAD_KEYMASTER\",\n              \"9123\": \"DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD\",\n              \"9124\": \"DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT\",\n              \"9125\": \"DNS_ERROR_DNSSEC_IS_DISABLED\",\n              \"9126\": \"DNS_ERROR_INVALID_XML\",\n              \"9127\": \"DNS_ERROR_NO_VALID_TRUST_ANCHORS\",\n              \"9128\": \"DNS_ERROR_ROLLOVER_NOT_POKEABLE\",\n              \"9129\": \"DNS_ERROR_NSEC3_NAME_COLLISION\",\n              \"9130\": \"DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1\",\n              \"9501\": \"DNS_INFO_NO_RECORDS\",\n              \"9502\": \"DNS_ERROR_BAD_PACKET\",\n              \"9503\": \"DNS_ERROR_NO_PACKET\",\n              \"9504\": \"DNS_ERROR_RCODE\",\n              \"9505\": \"DNS_ERROR_UNSECURE_PACKET\",\n              \"9506\": \"DNS_REQUEST_PENDING\",\n              \"9551\": \"DNS_ERROR_INVALID_TYPE\",\n              \"9552\": \"DNS_ERROR_INVALID_IP_ADDRESS\",\n              \"9553\": \"DNS_ERROR_INVALID_PROPERTY\",\n              \"9554\": \"DNS_ERROR_TRY_AGAIN_LATER\",\n              \"9555\": \"DNS_ERROR_NOT_UNIQUE\",\n              \"9556\": \"DNS_ERROR_NON_RFC_NAME\",\n              \"9557\": \"DNS_STATUS_FQDN\",\n              \"9558\": \"DNS_STATUS_DOTTED_NAME\",\n              \"9559\": \"DNS_STATUS_SINGLE_PART_NAME\",\n              \"9560\": \"DNS_ERROR_INVALID_NAME_CHAR\",\n              \"9561\": \"DNS_ERROR_NUMERIC_NAME\",\n              \"9562\": \"DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER\",\n              \"9563\": \"DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION\",\n              \"9564\": \"DNS_ERROR_CANNOT_FIND_ROOT_HINTS\",\n              \"9565\": \"DNS_ERROR_INCONSISTENT_ROOT_HINTS\",\n              \"9566\": \"DNS_ERROR_DWORD_VALUE_TOO_SMALL\",\n              \"9567\": \"DNS_ERROR_DWORD_VALUE_TOO_LARGE\",\n              \"9568\": \"DNS_ERROR_BACKGROUND_LOADING\",\n              \"9569\": \"DNS_ERROR_NOT_ALLOWED_ON_RODC\",\n              \"9570\": \"DNS_ERROR_NOT_ALLOWED_UNDER_DNAME\",\n              \"9571\": \"DNS_ERROR_DELEGATION_REQUIRED\",\n              \"9572\": \"DNS_ERROR_INVALID_POLICY_TABLE\",\n              \"9573\": \"DNS_ERROR_ADDRESS_REQUIRED\",\n              \"9601\": \"DNS_ERROR_ZONE_DOES_NOT_EXIST\",\n              \"9602\": \"DNS_ERROR_NO_ZONE_INFO\",\n              \"9603\": \"DNS_ERROR_INVALID_ZONE_OPERATION\",\n              \"9604\": \"DNS_ERROR_ZONE_CONFIGURATION_ERROR\",\n              \"9605\": \"DNS_ERROR_ZONE_HAS_NO_SOA_RECORD\",\n              \"9606\": \"DNS_ERROR_ZONE_HAS_NO_NS_RECORDS\",\n              \"9607\": \"DNS_ERROR_ZONE_LOCKED\",\n              \"9608\": \"DNS_ERROR_ZONE_CREATION_FAILED\",\n              \"9609\": \"DNS_ERROR_ZONE_ALREADY_EXISTS\",\n              \"9610\": \"DNS_ERROR_AUTOZONE_ALREADY_EXISTS\",\n              \"9611\": \"DNS_ERROR_INVALID_ZONE_TYPE\",\n              \"9612\": \"DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP\",\n              \"9613\": \"DNS_ERROR_ZONE_NOT_SECONDARY\",\n              \"9614\": \"DNS_ERROR_NEED_SECONDARY_ADDRESSES\",\n              \"9615\": \"DNS_ERROR_WINS_INIT_FAILED\",\n              \"9616\": \"DNS_ERROR_NEED_WINS_SERVERS\",\n              \"9617\": \"DNS_ERROR_NBSTAT_INIT_FAILED\",\n              \"9618\": \"DNS_ERROR_SOA_DELETE_INVALID\",\n              \"9619\": \"DNS_ERROR_FORWARDER_ALREADY_EXISTS\",\n              \"9620\": \"DNS_ERROR_ZONE_REQUIRES_MASTER_IP\",\n              \"9621\": \"DNS_ERROR_ZONE_IS_SHUTDOWN\",\n              \"9622\": \"DNS_ERROR_ZONE_LOCKED_FOR_SIGNING\",\n              \"9651\": \"DNS_ERROR_PRIMARY_REQUIRES_DATAFILE\",\n              \"9652\": \"DNS_ERROR_INVALID_DATAFILE_NAME\",\n              \"9653\": \"DNS_ERROR_DATAFILE_OPEN_FAILURE\",\n              \"9654\": \"DNS_ERROR_FILE_WRITEBACK_FAILED\",\n              \"9655\": \"DNS_ERROR_DATAFILE_PARSING\",\n              \"9701\": \"DNS_ERROR_RECORD_DOES_NOT_EXIST\",\n              \"9702\": \"DNS_ERROR_RECORD_FORMAT\",\n              \"9703\": \"DNS_ERROR_NODE_CREATION_FAILED\",\n              \"9704\": \"DNS_ERROR_UNKNOWN_RECORD_TYPE\",\n              \"9705\": \"DNS_ERROR_RECORD_TIMED_OUT\",\n              \"9706\": \"DNS_ERROR_NAME_NOT_IN_ZONE\",\n              \"9707\": \"DNS_ERROR_CNAME_LOOP\",\n              \"9708\": \"DNS_ERROR_NODE_IS_CNAME\",\n              \"9709\": \"DNS_ERROR_CNAME_COLLISION\",\n              \"9710\": \"DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT\",\n              \"9711\": \"DNS_ERROR_RECORD_ALREADY_EXISTS\",\n              \"9712\": \"DNS_ERROR_SECONDARY_DATA\",\n              \"9713\": \"DNS_ERROR_NO_CREATE_CACHE_DATA\",\n              \"9714\": \"DNS_ERROR_NAME_DOES_NOT_EXIST\",\n              \"9715\": \"DNS_WARNING_PTR_CREATE_FAILED\",\n              \"9716\": \"DNS_WARNING_DOMAIN_UNDELETED\",\n              \"9717\": \"DNS_ERROR_DS_UNAVAILABLE\",\n              \"9718\": \"DNS_ERROR_DS_ZONE_ALREADY_EXISTS\",\n              \"9719\": \"DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE\",\n              \"9720\": \"DNS_ERROR_NODE_IS_DNAME\",\n              \"9721\": \"DNS_ERROR_DNAME_COLLISION\",\n              \"9722\": \"DNS_ERROR_ALIAS_LOOP\",\n              \"9751\": \"DNS_INFO_AXFR_COMPLETE\",\n              \"9752\": \"DNS_ERROR_AXFR\",\n              \"9753\": \"DNS_INFO_ADDED_LOCAL_WINS\",\n              \"9801\": \"DNS_STATUS_CONTINUE_NEEDED\",\n              \"9851\": \"DNS_ERROR_NO_TCPIP\",\n              \"9852\": \"DNS_ERROR_NO_DNS_SERVERS\",\n              \"9901\": \"DNS_ERROR_DP_DOES_NOT_EXIST\",\n              \"9902\": \"DNS_ERROR_DP_ALREADY_EXISTS\",\n              \"9903\": \"DNS_ERROR_DP_NOT_ENLISTED\",\n              \"9904\": \"DNS_ERROR_DP_ALREADY_ENLISTED\",\n              \"9905\": \"DNS_ERROR_DP_NOT_AVAILABLE\",\n              \"9906\": \"DNS_ERROR_DP_FSMO_ERROR\",\n              \"9911\": \"DNS_ERROR_RRL_NOT_ENABLED\",\n              \"9912\": \"DNS_ERROR_RRL_INVALID_WINDOW_SIZE\",\n              \"9913\": \"DNS_ERROR_RRL_INVALID_IPV4_PREFIX\",\n              \"9914\": \"DNS_ERROR_RRL_INVALID_IPV6_PREFIX\",\n              \"9915\": \"DNS_ERROR_RRL_INVALID_TC_RATE\",\n              \"9916\": \"DNS_ERROR_RRL_INVALID_LEAK_RATE\",\n              \"9917\": \"DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE\",\n              \"9921\": \"DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS\",\n              \"9922\": \"DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST\",\n              \"9923\": \"DNS_ERROR_VIRTUALIZATION_TREE_LOCKED\",\n              \"9924\": \"DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME\",\n              \"9925\": \"DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE\",\n              \"9951\": \"DNS_ERROR_ZONESCOPE_ALREADY_EXISTS\",\n              \"9952\": \"DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST\",\n              \"9953\": \"DNS_ERROR_DEFAULT_ZONESCOPE\",\n              \"9954\": \"DNS_ERROR_INVALID_ZONESCOPE_NAME\",\n              \"9955\": \"DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES\",\n              \"9956\": \"DNS_ERROR_LOAD_ZONESCOPE_FAILED\",\n              \"9957\": \"DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED\",\n              \"9958\": \"DNS_ERROR_INVALID_SCOPE_NAME\",\n              \"9959\": \"DNS_ERROR_SCOPE_DOES_NOT_EXIST\",\n              \"9960\": \"DNS_ERROR_DEFAULT_SCOPE\",\n              \"9961\": \"DNS_ERROR_INVALID_SCOPE_OPERATION\",\n              \"9962\": \"DNS_ERROR_SCOPE_LOCKED\",\n              \"9963\": \"DNS_ERROR_SCOPE_ALREADY_EXISTS\",\n              \"9971\": \"DNS_ERROR_POLICY_ALREADY_EXISTS\",\n              \"9972\": \"DNS_ERROR_POLICY_DOES_NOT_EXIST\",\n              \"9973\": \"DNS_ERROR_POLICY_INVALID_CRITERIA\",\n              \"9974\": \"DNS_ERROR_POLICY_INVALID_SETTINGS\",\n              \"9975\": \"DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED\",\n              \"9976\": \"DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST\",\n              \"9977\": \"DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS\",\n              \"9978\": \"DNS_ERROR_SUBNET_DOES_NOT_EXIST\",\n              \"9979\": \"DNS_ERROR_SUBNET_ALREADY_EXISTS\",\n              \"9980\": \"DNS_ERROR_POLICY_LOCKED\",\n              \"9981\": \"DNS_ERROR_POLICY_INVALID_WEIGHT\",\n              \"9982\": \"DNS_ERROR_POLICY_INVALID_NAME\",\n              \"9983\": \"DNS_ERROR_POLICY_MISSING_CRITERIA\",\n              \"9984\": \"DNS_ERROR_INVALID_CLIENT_SUBNET_NAME\",\n              \"9985\": \"DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID\",\n              \"9986\": \"DNS_ERROR_POLICY_SCOPE_MISSING\",\n              \"9987\": \"DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED\",\n              \"9988\": \"DNS_ERROR_SERVERSCOPE_IS_REFERENCED\",\n              \"9989\": \"DNS_ERROR_ZONESCOPE_IS_REFERENCED\",\n              \"9990\": \"DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET\",\n              \"9991\": \"DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL\",\n              \"9992\": \"DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL\",\n              \"9993\": \"DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE\",\n              \"9994\": \"DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN\",\n              \"9995\": \"DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE\",\n              \"9996\": \"DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY\",\n              \"10054\": \"WSAECONNRESET\",\n              \"10055\": \"WSAENOBUFS\",\n              \"10060\": \"WSAETIMEDOUT\",\n          };\n\n          // Windows DNS record type constants.\n          // https://docs.microsoft.com/en-us/windows/win32/dns/dns-constants\n          var dnsRecordTypes = {\n              \"1\": \"A\",\n              \"2\": \"NS\",\n              \"3\": \"MD\",\n              \"4\": \"MF\",\n              \"5\": \"CNAME\",\n              \"6\": \"SOA\",\n              \"7\": \"MB\",\n              \"8\": \"MG\",\n              \"9\": \"MR\",\n              \"10\": \"NULL\",\n              \"11\": \"WKS\",\n              \"12\": \"PTR\",\n              \"13\": \"HINFO\",\n              \"14\": \"MINFO\",\n              \"15\": \"MX\",\n              \"16\": \"TXT\",\n              \"17\": \"RP\",\n              \"18\": \"AFSDB\",\n              \"19\": \"X25\",\n              \"20\": \"ISDN\",\n              \"21\": \"RT\",\n              \"22\": \"NSAP\",\n              \"23\": \"NSAPPTR\",\n              \"24\": \"SIG\",\n              \"25\": \"KEY\",\n              \"26\": \"PX\",\n              \"27\": \"GPOS\",\n              \"28\": \"AAAA\",\n              \"29\": \"LOC\",\n              \"30\": \"NXT\",\n              \"31\": \"EID\",\n              \"32\": \"NIMLOC\",\n              \"33\": \"SRV\",\n              \"34\": \"ATMA\",\n              \"35\": \"NAPTR\",\n              \"36\": \"KX\",\n              \"37\": \"CERT\",\n              \"38\": \"A6\",\n              \"39\": \"DNAME\",\n              \"40\": \"SINK\",\n              \"41\": \"OPT\",\n              \"43\": \"DS\",\n              \"46\": \"RRSIG\",\n              \"47\": \"NSEC\",\n              \"48\": \"DNSKEY\",\n              \"49\": \"DHCID\",\n              \"100\": \"UINFO\",\n              \"101\": \"UID\",\n              \"102\": \"GID\",\n              \"103\": \"UNSPEC\",\n              \"248\": \"ADDRS\",\n              \"249\": \"TKEY\",\n              \"250\": \"TSIG\",\n              \"251\": \"IXFR\",\n              \"252\": \"AXFR\",\n              \"253\": \"MAILB\",\n              \"254\": \"MAILA\",\n              \"255\": \"ANY\",\n              \"65281\": \"WINS\",\n              \"65282\": \"WINSR\",\n          };\n\n          var setProcessNameUsingExe = function (evt) {\n              setProcessNameFromPath(evt, \"process.executable\", \"process.name\");\n          };\n\n          var setParentProcessNameUsingExe = function (evt) {\n              setProcessNameFromPath(\n                  evt,\n                  \"process.parent.executable\",\n                  \"process.parent.name\"\n              );\n          };\n\n          var setProcessNameFromPath = function (evt, pathField, nameField) {\n              var name = evt.Get(nameField);\n              if (name) {\n                  return;\n              }\n              var exe = evt.Get(pathField);\n              if (!exe) {\n                  return;\n              }\n              evt.Put(nameField, path.basename(exe));\n          };\n\n          var splitCommandLine = function (evt, source, target) {\n              var commandLine = evt.Get(source);\n              if (!commandLine) {\n                  return;\n              }\n              evt.Put(target, windows.splitCommandLine(commandLine));\n          };\n\n          var splitProcessArgs = function (evt) {\n              splitCommandLine(evt, \"process.command_line\", \"process.args\");\n          };\n\n          var splitParentProcessArgs = function (evt) {\n              splitCommandLine(\n                  evt,\n                  \"process.parent.command_line\",\n                  \"process.parent.args\"\n              );\n          };\n\n          var addUser = function (evt) {\n              var id = evt.Get(\"winlog.user.identifier\");\n              if (id) {\n                  evt.Put(\"user.id\", id);\n              }\n              var userParts = evt.Get(\"winlog.event_data.User\");\n              if (!userParts) {\n                  return;\n              }\n              userParts = userParts.split(\"\\\\\");\n              if (userParts.length === 2) {\n                  evt.Put(\"user.domain\", userParts[0]);\n                  evt.Put(\"user.name\", userParts[1]);\n                  evt.AppendTo(\"related.user\", userParts[1]);\n                  evt.Delete(\"winlog.event_data.User\");\n              }\n          };\n\n          var setRuleName = function (evt) {\n              var ruleName = evt.Get(\"winlog.event_data.RuleName\");\n              evt.Delete(\"winlog.event_data.RuleName\");\n\n              if (!ruleName || ruleName === \"-\") {\n                  return;\n              }\n\n              evt.Put(\"rule.name\", ruleName);\n          };\n\n          var addNetworkDirection = function (evt) {\n              switch (evt.Get(\"winlog.event_data.Initiated\")) {\n                  case \"true\":\n                      evt.Put(\"network.direction\", \"egress\");\n                      break;\n                  case \"false\":\n                      evt.Put(\"network.direction\", \"ingress\");\n                      break;\n              }\n              evt.Delete(\"winlog.event_data.Initiated\");\n          };\n\n          var addNetworkType = function (evt) {\n              switch (evt.Get(\"winlog.event_data.SourceIsIpv6\")) {\n                  case \"true\":\n                      evt.Put(\"network.type\", \"ipv6\");\n                      break;\n                  case \"false\":\n                      evt.Put(\"network.type\", \"ipv4\");\n                      break;\n              }\n              evt.Delete(\"winlog.event_data.SourceIsIpv6\");\n              evt.Delete(\"winlog.event_data.DestinationIsIpv6\");\n          };\n\n          var setRelatedIP = function (evt) {\n              var sourceIP = evt.Get(\"source.ip\");\n              if (sourceIP) {\n                  evt.AppendTo(\"related.ip\", sourceIP);\n              }\n\n              var destIP = evt.Get(\"destination.ip\");\n              if (destIP) {\n                  evt.AppendTo(\"related.ip\", destIP);\n              }\n          };\n\n          var getHashPath = function (namespace, hashKey) {\n              if (hashKey === \"imphash\") {\n                  return namespace + \".pe.imphash\";\n              }\n\n              return namespace + \".hash.\" + hashKey;\n          };\n\n          var emptyHashRegex = /^0*$/;\n\n          var hashIsEmpty = function (value) {\n              if (!value) {\n                  return true;\n              }\n\n              return emptyHashRegex.test(value);\n          }\n\n          // Adds hashes from the given hashField in the event to the 'hash' key\n          // in the specified namespace. It also adds all the hashes to 'related.hash'.\n          var addHashes = function (evt, namespace, hashField) {\n              var hashes = evt.Get(hashField);\n              if (!hashes) {\n                  return;\n              }\n              evt.Delete(hashField);\n              hashes.split(\",\").forEach(function (hash) {\n                  var parts = hash.split(\"=\");\n                  if (parts.length !== 2) {\n                      return;\n                  }\n\n                  var key = parts[0].toLowerCase();\n                  var value = parts[1].toLowerCase();\n\n                  if (hashIsEmpty(value)) {\n                      return;\n                  }\n\n                  var path = getHashPath(namespace, key);\n\n                  evt.Put(path, value);\n                  evt.AppendTo(\"related.hash\", value);\n\n                  // TODO: remove in 8.0, see (https://github.com/elastic/beats/issues/18364).\n                  evt.Put(\"hash.\" + key, value);\n              });\n          };\n\n          var splitFileHashes = function (evt) {\n              addHashes(evt, \"file\", \"winlog.event_data.Hashes\");\n          };\n\n          var splitFileHash = function (evt) {\n              addHashes(evt, \"file\", \"winlog.event_data.Hash\");\n          };\n\n          var splitProcessHashes = function (evt) {\n              addHashes(evt, \"process\", \"winlog.event_data.Hashes\");\n          };\n\n          var removeEmptyEventData = function (evt) {\n              var eventData = evt.Get(\"winlog.event_data\");\n              if (eventData && Object.keys(eventData).length === 0) {\n                  evt.Delete(\"winlog.event_data\");\n              }\n          };\n\n          var translateDnsQueryStatus = function (evt) {\n              var statusCode = evt.Get(\"sysmon.dns.status\");\n              if (!statusCode) {\n                  return;\n              }\n              var statusName = dnsQueryStatusCodes[statusCode];\n              if (statusName === undefined) {\n                  return;\n              }\n              evt.Put(\"sysmon.dns.status\", statusName);\n          };\n\n          // Splits the QueryResults field that contains the DNS responses.\n          // Example: \"type:  5 f2.taboola.map.fastly.net;::ffff:151.101.66.2;::ffff:151.101.130.2;::ffff:151.101.194.2;::ffff:151.101.2.2;\"\n          var splitDnsQueryResults = function (evt) {\n              var results = evt.Get(\"winlog.event_data.QueryResults\");\n              if (!results) {\n                  return;\n              }\n              results = results.split(\";\");\n\n              var answers = [];\n              var ips = [];\n              for (var i = 0; i < results.length; i++) {\n                  var answer = results[i];\n                  if (!answer) {\n                      continue;\n                  }\n\n                  if (answer.startsWith(\"type:\")) {\n                      var parts = answer.split(/\\s+/);\n                      if (parts.length !== 3) {\n                          throw \"unexpected QueryResult format\";\n                      }\n\n                      answers.push({\n                          type: dnsRecordTypes[parts[1]],\n                          data: parts[2],\n                      });\n                  } else {\n                      // Convert V4MAPPED addresses.\n                      answer = answer.replace(\"::ffff:\", \"\");\n                      if (net.isIP(answer)) {\n                          ips.push(answer);\n\n                          // Synthesize record type based on IP address type.\n                          var type = \"A\";\n                          if (answer.indexOf(\":\") !== -1) {\n                              type = \"AAAA\";\n                          }\n                          answers.push({\n                              type: type,\n                              data: answer,\n                          });\n                      }\n                  }\n              }\n\n              if (answers.length > 0) {\n                  evt.Put(\"dns.answers\", answers);\n              }\n              if (ips.length > 0) {\n                  evt.Put(\"dns.resolved_ip\", ips);\n              }\n              evt.Delete(\"winlog.event_data.QueryResults\");\n          };\n\n          var parseUtcTime = new processor.Timestamp({\n              field: \"winlog.event_data.UtcTime\",\n              target_field: \"winlog.event_data.UtcTime\",\n              timezone: \"UTC\",\n              layouts: [\"2006-01-02 15:04:05.999\"],\n              tests: [\"2019-06-26 21:19:43.237\"],\n              ignore_missing: true,\n          });\n\n          var setAdditionalSignatureFields = function (evt) {\n              var signed = evt.Get(\"winlog.event_data.Signed\");\n              if (!signed) {\n                  return;\n              }\n              evt.Put(\"file.code_signature.signed\", true);\n              var signatureStatus = evt.Get(\"winlog.event_data.SignatureStatus\");\n              evt.Put(\"file.code_signature.valid\", signatureStatus === \"Valid\");\n          };\n\n          var setAdditionalFileFieldsFromPath = function (evt) {\n              var filePath = evt.Get(\"file.path\");\n              if (!filePath) {\n                  return;\n              }\n\n              evt.Put(\"file.name\", path.basename(filePath));\n              evt.Put(\"file.directory\", path.dirname(filePath));\n\n              // path returns extensions with a preceding ., e.g.: .tmp, .png\n              // according to ecs the expected format is without it, so we need to remove it.\n              var ext = path.extname(filePath);\n              if (!ext) {\n                  return;\n              }\n\n              if (ext.charAt(0) === \".\") {\n                  ext = ext.substr(1);\n              }\n              evt.Put(\"file.extension\", ext);\n          };\n\n          // https://docs.microsoft.com/en-us/windows/win32/sysinfo/registry-hives\n          var commonRegistryHives = {\n              HKEY_CLASSES_ROOT: \"HKCR\",\n              HKCR: \"HKCR\",\n              HKEY_CURRENT_CONFIG: \"HKCC\",\n              HKCC: \"HKCC\",\n              HKEY_CURRENT_USER: \"HKCU\",\n              HKCU: \"HKCU\",\n              HKEY_DYN_DATA: \"HKDD\",\n              HKDD: \"HKDD\",\n              HKEY_LOCAL_MACHINE: \"HKLM\",\n              HKLM: \"HKLM\",\n              HKEY_PERFORMANCE_DATA: \"HKPD\",\n              HKPD: \"HKPD\",\n              HKEY_USERS: \"HKU\",\n              HKU: \"HKU\",\n          };\n\n          var qwordRegex = new RegExp(/QWORD \\(((0x\\d{8})-(0x\\d{8}))\\)/, \"i\");\n          var dwordRegex = new RegExp(/DWORD \\((0x\\d{8})\\)/, \"i\");\n\n          var setRegistryFields = function (evt) {\n              var path = evt.Get(\"winlog.event_data.TargetObject\");\n              if (!path) {\n                  return;\n              }\n              evt.Put(\"registry.path\", path);\n              var pathTokens = path.split(\"\\\\\");\n              var hive = commonRegistryHives[pathTokens[0]];\n              if (hive) {\n                  evt.Put(\"registry.hive\", hive);\n                  pathTokens.splice(0, 1);\n                  if (pathTokens.length > 0) {\n                      evt.Put(\"registry.key\", pathTokens.join(\"\\\\\"));\n                  }\n              }\n              var value = pathTokens[pathTokens.length - 1];\n              evt.Put(\"registry.value\", value);\n              var data = evt.Get(\"winlog.event_data.Details\");\n              if (!data) {\n                  return;\n              }\n              // sysmon only returns details of a registry modification\n              // if it's a qword or dword\n              var dataType;\n              var dataValue;\n              var match = qwordRegex.exec(data);\n              if (match && match.length > 0) {\n                  var parsedHighByte = parseInt(match[2]);\n                  var parsedLowByte = parseInt(match[3]);\n                  if (!isNaN(parsedHighByte) && !isNaN(parsedLowByte)) {\n                      dataValue = \"\" + ((parsedHighByte << 8) + parsedLowByte);\n                      dataType = \"SZ_QWORD\";\n                  }\n              } else {\n                  match = dwordRegex.exec(data);\n                  if (match && match.length > 0) {\n                      var parsedValue = parseInt(match[1]);\n                      if (!isNaN(parsedValue)) {\n                          dataType = \"SZ_DWORD\";\n                          dataValue = \"\" + parsedValue;\n                      }\n                  }\n              }\n              if (dataType) {\n                  evt.Put(\"registry.data.strings\", [dataValue]);\n                  evt.Put(\"registry.data.type\", dataType);\n              }\n          };\n\n          // Event ID 1 - Process Create.\n          var event1 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"start\", \"process_start\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                      {\n                          from: \"winlog.event_data.CommandLine\",\n                          to: \"process.command_line\",\n                      },\n                      {\n                          from: \"winlog.event_data.CurrentDirectory\",\n                          to: \"process.working_directory\",\n                      },\n                      {\n                          from: \"winlog.event_data.ParentProcessGuid\",\n                          to: \"process.parent.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ParentProcessId\",\n                          to: \"process.parent.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.ParentImage\",\n                          to: \"process.parent.executable\",\n                      },\n                      {\n                          from: \"winlog.event_data.ParentCommandLine\",\n                          to: \"process.parent.command_line\",\n                      },\n                      {\n                          from: \"winlog.event_data.OriginalFileName\",\n                          to: \"process.pe.original_file_name\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.Company\",\n                          to: \"process.pe.company\",\n                      },\n                      {\n                          from: \"winlog.event_data.Description\",\n                          to: \"process.pe.description\",\n                      },\n                      {\n                          from: \"winlog.event_data.FileVersion\",\n                          to: \"process.pe.file_version\",\n                      },\n                      {\n                          from: \"winlog.event_data.Product\",\n                          to: \"process.pe.product\",\n                      },\n                  ],\n                  mode: \"copy\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setProcessNameUsingExe)\n              .Add(splitProcessArgs)\n              .Add(addUser)\n              .Add(splitProcessHashes)\n              .Add(setParentProcessNameUsingExe)\n              .Add(splitParentProcessArgs)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 2 - File creation time changed.\n          var event2 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"file\"],\n                      type: [\"change\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                      {\n                          from: \"winlog.event_data.TargetFilename\",\n                          to: \"file.path\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setAdditionalFileFieldsFromPath)\n              .Add(setProcessNameUsingExe)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 3 - Network connection detected.\n          var event3 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"network\"],\n                      type: [\"connection\", \"start\", \"protocol\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                      {\n                          from: \"winlog.event_data.Protocol\",\n                          to: \"network.transport\",\n                      },\n                      {\n                          from: \"winlog.event_data.SourceIp\",\n                          to: \"source.ip\",\n                          type: \"ip\",\n                      },\n                      {\n                          from: \"winlog.event_data.SourceHostname\",\n                          to: \"source.domain\",\n                          type: \"string\",\n                      },\n                      {\n                          from: \"winlog.event_data.SourcePort\",\n                          to: \"source.port\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.DestinationIp\",\n                          to: \"destination.ip\",\n                          type: \"ip\",\n                      },\n                      {\n                          from: \"winlog.event_data.DestinationHostname\",\n                          to: \"destination.domain\",\n                          type: \"string\",\n                      },\n                      {\n                          from: \"winlog.event_data.DestinationPort\",\n                          to: \"destination.port\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.DestinationPortName\",\n                          to: \"network.protocol\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setRelatedIP)\n              .Add(setProcessNameUsingExe)\n              .Add(addUser)\n              .Add(addNetworkDirection)\n              .Add(addNetworkType)\n              .CommunityID()\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 4 - Sysmon service state changed.\n          var event4 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"change\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                      from: \"winlog.event_data.UtcTime\",\n                      to: \"@timestamp\",\n                  }, ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 5 - Process terminated.\n          var event5 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"end\", \"process_end\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setProcessNameUsingExe)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 6 - Driver loaded.\n          var event6 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"driver\"],\n                      type: [\"start\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ImageLoaded\",\n                          to: \"file.path\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.Signature\",\n                          to: \"file.code_signature.subject_name\",\n                      },\n                      {\n                          from: \"winlog.event_data.SignatureStatus\",\n                          to: \"file.code_signature.status\",\n                      },\n                  ],\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setAdditionalFileFieldsFromPath)\n              .Add(setAdditionalSignatureFields)\n              .Add(splitFileHashes)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 7 - Image loaded.\n          var event7 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"change\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                      {\n                          from: \"winlog.event_data.ImageLoaded\",\n                          to: \"file.path\",\n                      },\n                      {\n                          from: \"winlog.event_data.OriginalFileName\",\n                          to: \"file.pe.original_file_name\",\n                      },\n\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.Signature\",\n                          to: \"file.code_signature.subject_name\",\n                      },\n                      {\n                          from: \"winlog.event_data.SignatureStatus\",\n                          to: \"file.code_signature.status\",\n                      },\n                      {\n                          from: \"winlog.event_data.Company\",\n                          to: \"file.pe.company\",\n                      },\n                      {\n                          from: \"winlog.event_data.Description\",\n                          to: \"file.pe.description\",\n                      },\n                      {\n                          from: \"winlog.event_data.FileVersion\",\n                          to: \"file.pe.file_version\",\n                      },\n                      {\n                          from: \"winlog.event_data.Product\",\n                          to: \"file.pe.product\",\n                      },\n                  ],\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setAdditionalFileFieldsFromPath)\n              .Add(setAdditionalSignatureFields)\n              .Add(setProcessNameUsingExe)\n              .Add(splitFileHashes)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 8 - CreateRemoteThread detected.\n          var event8 = new processor.Chain()\n              .Add(parseUtcTime)\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.SourceProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.SourceProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.SourceImage\",\n                          to: \"process.executable\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setProcessNameUsingExe)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 9 - RawAccessRead detected.\n          var event9 = new processor.Chain()\n              .Add(parseUtcTime)\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                      {\n                          from: \"winlog.event_data.Device\",\n                          to: \"file.path\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setAdditionalFileFieldsFromPath)\n              .Add(setProcessNameUsingExe)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 10 - Process accessed.\n          var event10 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"access\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.SourceProcessGUID\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.SourceProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.SourceThreadId\",\n                          to: \"process.thread.id\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.SourceImage\",\n                          to: \"process.executable\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setProcessNameUsingExe)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 11 - File created.\n          var event11 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"file\"],\n                      type: [\"creation\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                      {\n                          from: \"winlog.event_data.TargetFilename\",\n                          to: \"file.path\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setAdditionalFileFieldsFromPath)\n              .Add(setProcessNameUsingExe)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 12 - Registry object added or deleted.\n          var event12 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"configuration\", \"registry\"],\n                      type: [\"change\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setRegistryFields)\n              .Add(setProcessNameUsingExe)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 13 - Registry value set.\n          var event13 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"configuration\", \"registry\"],\n                      type: [\"change\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setRegistryFields)\n              .Add(setProcessNameUsingExe)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 14 - Registry object renamed.\n          var event14 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"configuration\", \"registry\"],\n                      type: [\"change\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setRegistryFields)\n              .Add(setProcessNameUsingExe)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 15 - File stream created.\n          var event15 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"file\"],\n                      type: [\"access\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                      {\n                          from: \"winlog.event_data.TargetFilename\",\n                          to: \"file.path\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setAdditionalFileFieldsFromPath)\n              .Add(setProcessNameUsingExe)\n              .Add(splitFileHash)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 16 - Sysmon config state changed.\n          var event16 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"configuration\"],\n                      type: [\"change\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                      from: \"winlog.event_data.UtcTime\",\n                      to: \"@timestamp\",\n                  }, ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 17 - Pipe Created.\n          var event17 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"file\"], // pipes are files\n                      type: [\"creation\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.PipeName\",\n                          to: \"file.name\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setProcessNameUsingExe)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 18 - Pipe Connected.\n          var event18 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"file\"], // pipes are files\n                      type: [\"access\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.PipeName\",\n                          to: \"file.name\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(setProcessNameUsingExe)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 19 - WmiEventFilter activity detected.\n          var event19 = new processor.Chain()\n              .Add(parseUtcTime)\n              .Convert({\n                  fields: [{\n                      from: \"winlog.event_data.UtcTime\",\n                      to: \"@timestamp\",\n                  }, ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(addUser)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 20 - WmiEventConsumer activity detected.\n          var event20 = new processor.Chain()\n              .Add(parseUtcTime)\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.Destination\",\n                          to: \"process.executable\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(addUser)\n              .Add(setProcessNameUsingExe)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 21 - WmiEventConsumerToFilter activity detected.\n          var event21 = new processor.Chain()\n              .Add(parseUtcTime)\n              .Convert({\n                  fields: [{\n                      from: \"winlog.event_data.UtcTime\",\n                      to: \"@timestamp\",\n                  }, ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(addUser)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 22 - DNSEvent (DNS query).\n          var event22 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"network\"],\n                      type: [\"connection\", \"protocol\", \"info\"],\n                  },\n                  target: \"event\",\n              })\n              .AddFields({\n                  fields: {\n                      protocol: \"dns\",\n                  },\n                  target: \"network\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                      {\n                          from: \"winlog.event_data.QueryName\",\n                          to: \"dns.question.name\",\n                      },\n                      {\n                          from: \"winlog.event_data.QueryStatus\",\n                          to: \"sysmon.dns.status\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .RegisteredDomain({\n                  ignore_failure: true,\n                  ignore_missing: true,\n                  field: \"dns.question.name\",\n                  target_field: \"dns.question.registered_domain\",\n                  target_subdomain_field: \"dns.question.subdomain\",\n                  target_etld_field: \"dns.question.top_level_domain\",\n              })\n              .Add(setRuleName)\n              .Add(translateDnsQueryStatus)\n              .Add(splitDnsQueryResults)\n              .Add(setProcessNameUsingExe)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 23 - FileDelete (A file delete was detected).\n          var event23 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"file\"], // pipes are files\n                      type: [\"deletion\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.RuleName\",\n                          to: \"rule.name\",\n                      },\n                      {\n                          from: \"winlog.event_data.TargetFilename\",\n                          to: \"file.path\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                      {\n                          from: \"winlog.event_data.Archived\",\n                          to: \"sysmon.file.archived\",\n                          type: \"boolean\",\n                      },\n                      {\n                          from: \"winlog.event_data.IsExecutable\",\n                          to: \"sysmon.file.is_executable\",\n                          type: \"boolean\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(addUser)\n              .Add(splitProcessHashes)\n              .Add(setProcessNameUsingExe)\n              .Add(setAdditionalFileFieldsFromPath)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 24 - ClipboardChange (New content in the clipboard).\n          var event24 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      type: [\"change\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                      {\n                          from: \"winlog.event_data.Archived\",\n                          to: \"sysmon.file.archived\",\n                          type: \"boolean\",\n                      },\n                      {\n                          from: \"winlog.event_data.IsExecutable\",\n                          to: \"sysmon.file.is_executable\",\n                          type: \"boolean\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(addUser)\n              .Add(splitProcessHashes)\n              .Add(setProcessNameUsingExe)\n              .Add(setAdditionalFileFieldsFromPath)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 25 - ProcessTampering (Process image change).\n          var event25 = new processor.Chain()\n              .Add(parseUtcTime)\n              .AddFields({\n                  fields: {\n                      category: [\"process\"],\n                      type: [\"change\"],\n                  },\n                  target: \"event\",\n              })\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessGuid\",\n                          to: \"process.entity_id\",\n                      },\n                      {\n                          from: \"winlog.event_data.ProcessId\",\n                          to: \"process.pid\",\n                          type: \"long\",\n                      },\n                      {\n                          from: \"winlog.event_data.Image\",\n                          to: \"process.executable\",\n                      },\n                      {\n                          from: \"winlog.event_data.Archived\",\n                          to: \"sysmon.file.archived\",\n                          type: \"boolean\",\n                      },\n                      {\n                          from: \"winlog.event_data.IsExecutable\",\n                          to: \"sysmon.file.is_executable\",\n                          type: \"boolean\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(setRuleName)\n              .Add(addUser)\n              .Add(splitProcessHashes)\n              .Add(setProcessNameUsingExe)\n              .Add(setAdditionalFileFieldsFromPath)\n              .Add(removeEmptyEventData)\n              .Build();\n\n          // Event ID 255 - Error report.\n          var event255 = new processor.Chain()\n              .Add(parseUtcTime)\n              .Convert({\n                  fields: [{\n                          from: \"winlog.event_data.UtcTime\",\n                          to: \"@timestamp\",\n                      },\n                      {\n                          from: \"winlog.event_data.ID\",\n                          to: \"error.code\",\n                      },\n                  ],\n                  mode: \"rename\",\n                  ignore_missing: true,\n                  fail_on_error: false,\n              })\n              .Add(removeEmptyEventData)\n              .Build();\n\n          return {\n              1: event1.Run,\n              2: event2.Run,\n              3: event3.Run,\n              4: event4.Run,\n              5: event5.Run,\n              6: event6.Run,\n              7: event7.Run,\n              8: event8.Run,\n              9: event9.Run,\n              10: event10.Run,\n              11: event11.Run,\n              12: event12.Run,\n              13: event13.Run,\n              14: event14.Run,\n              15: event15.Run,\n              16: event16.Run,\n              17: event17.Run,\n              18: event18.Run,\n              19: event19.Run,\n              20: event20.Run,\n              21: event21.Run,\n              22: event22.Run,\n              23: event23.Run,\n              24: event24.Run,\n              25: event25.Run,\n              255: event255.Run,\n\n              process: function (evt) {\n                  var event_id = evt.Get(\"winlog.event_id\");\n                  var processor = this[event_id];\n                  if (processor === undefined) {\n                      throw \"unexpected sysmon event_id\";\n                  }\n                  evt.Put(\"event.module\", \"sysmon\");\n                  processor(evt);\n              },\n          };\n      })();\n\n      function process(evt) {\n          return sysmon.process(evt);\n      }\n- \"drop_fields\":\n    \"fields\":\n    - \"event.module\"\n    \"ignore_missing\": true\n",
            "data_stream.dataset": "winlog.sysmon",
            "event_id": "",
            "ignore_older": "72h",
            "language": 0,
            "preserve_original_event": false,
            "providers": [],
            "tags": []
          }
        }
      }
    }
  },
  "name": "winlog-sysmon",
  "namespace": "default",
  "package": {
    "name": "winlog",
    "version": "2.0.0"
  },
  "policy_id": "$AGENT_POLICY_ID"
}
